{"version":3,"sources":["components/dataTable/index.js","components/EmpData/index.js","components/Wrapper/index.js","components/Hero/index.js","components/Footer/index.js","App.js","reportWebVitals.js","index.js"],"names":["DataTable","props","data","columns","label","field","sort","searchable","rows","employees","console","log","searchtop","responsive","striped","hover","sorting","bordered","info","Emp","state","empres","componentDidMount","axios","get","then","empdata","edata","results","emprec","i","length","user","name","first","last","email","age","dob","phone","cell","city","location","country","img","src","picture","thumbnail","alt","push","setState","this","React","Component","Wrapper","className","children","Hero","id","Footer","class","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAwEeA,EApEG,SAACC,GAEjB,IAAMC,EAAO,CAEXC,QAAS,CACP,CACEC,MAAO,OACPC,MAAO,OACPC,KAAM,MACNC,WAAY,QAEd,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,OAER,CACEF,MAAO,MACPC,MAAO,MACPC,KAAM,OAER,CACEF,MAAO,QACPC,MAAO,QACPC,KAAM,YAER,CACEF,MAAO,OACPC,MAAO,OACPC,KAAM,OAER,CACEF,MAAO,OACPC,MAAO,OACPC,KAAM,OAER,CACEF,MAAO,UACPC,MAAO,UACPC,KAAM,OAER,CACEF,MAAO,MACPC,MAAO,MACPC,KAAM,aAIVE,KAAMP,EAAMQ,WAKd,OAHAC,QAAQC,IAAI,QAASV,EAAMQ,WAC3BC,QAAQC,IAAI,OAAQT,GAGlB,cAAC,IAAD,CACEU,UAAU,OAEVC,YAAU,EACVC,SAAO,EACPC,OAAK,EACLC,QAAQ,OACRC,UAAQ,EACRf,KAAMA,EACNgB,MAAM,KC/DSC,E,4MAEnBC,MAAQ,CACNC,OAAQ,I,EAGVC,kBAAoB,WAClBC,IAAMC,IAAI,yCAAyCC,MAAK,SAACC,GAGvD,IAFA,IAAMC,EAAQD,EAAQxB,KAAK0B,QACvBC,EAAS,GACJC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAAK,CACrC,IAAME,EAAOL,EAAMG,GACfZ,EAAO,CACTe,KAAMD,EAAKC,KAAKC,MAAQ,IAAMF,EAAKC,KAAKE,KACxCC,MAAOJ,EAAKI,MACZC,IAAKL,EAAKM,IAAID,IACdE,MAAOP,EAAKO,MACZC,KAAMR,EAAKQ,KACXC,KAAMT,EAAKU,SAASD,KACpBE,QAASX,EAAKU,SAASC,QAEvBC,IACE,qBACEC,IAAKb,EAAKc,QAAQC,UAClBC,IAAKhB,EAAKC,KAAKC,MAAQ,6BAK7BL,EAAOoB,KAAK/B,GAGd,EAAKgC,SAAS,CAAE7B,OAAQQ,Q,4CAI5B,WACE,OAAO,cAAC,EAAD,CAAWpB,UAAW0C,KAAK/B,MAAMC,a,GArCX+B,IAAMC,W,OCGxBC,MAJf,SAAiBrD,GACf,OAAO,qBAAKsD,UAAU,UAAf,SAA0BtD,EAAMuD,Y,OCY1BC,MAZf,WACE,OACE,sBAAKF,UAAU,mBAAf,UAEE,oBAAIG,GAAG,QAAP,gCACA,mBAAGH,UAAU,OAAb,6ECGSI,MAVf,WACE,OACE,qBAAKC,MAAM,4CAA4CF,GAAG,OAA1D,SACE,qBAAKE,MAAM,yCAAX,SACE,mBAAGA,MAAM,eAAT,oDCaOC,MAZf,WACE,OACE,8BACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,UCDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.b0d1f9a9.chunk.js","sourcesContent":["import React from \"react\";\n// importing MDBD datatable for ease of sorting and searching\nimport { MDBDataTable } from \"mdbreact\";\n\nconst DataTable = (props) => {\n  // the const data will assign MDBDataTable an object of column and row data\n  const data = {\n    // defining what the columns will be\n    columns: [\n      {\n        label: \"Name\",\n        field: \"name\",\n        sort: \"asc\",\n        searchable: \"true\",\n      },\n      {\n        label: \"Email\",\n        field: \"email\",\n        sort: \"asc\",\n      },\n      {\n        label: \"Age\",\n        field: \"age\",\n        sort: \"asc\",\n      },\n      {\n        label: \"Phone\",\n        field: \"phone\",\n        sort: \"disabled\",\n      },\n      {\n        label: \"Cell\",\n        field: \"cell\",\n        sort: \"asc\",\n      },\n      {\n        label: \"City\",\n        field: \"city\",\n        sort: \"asc\",\n      },\n      {\n        label: \"Country\",\n        field: \"country\",\n        sort: \"asc\",\n      },\n      {\n        label: \"Img\",\n        field: \"img\",\n        sort: \"disabled\",\n      },\n    ],\n    // setting the rows equal to the properties passed in empData\n    rows: props.employees,\n  };\n  console.log(\"props\", props.employees);\n  console.log(\"data\", data);\n  // returning our data table with sorting and search functions built in\n  return (\n    <MDBDataTable\n      searchtop=\"true\"\n      //searchBottom=\"false\"\n      responsive\n      striped\n      hover\n      sorting=\"true\"\n      bordered\n      data={data}\n      info={true}\n    />\n  );\n};\n\nexport default DataTable;\n","import axios from \"axios\";\nimport React from \"react\";\nimport DataTable from \"../dataTable\";\n\nexport default class Emp extends React.Component {\n  // initializing the state for the rempres (employee data response)\n  state = {\n    empres: [],\n  };\n  // calling the axios get method to retrieve the API data\n  componentDidMount = () => {\n    axios.get(\"https://randomuser.me/api?results=100\").then((empdata) => {\n      const edata = empdata.data.results;\n      let emprec = [];\n      for (let i = 0; i < edata.length; i++) {\n        const user = edata[i];\n        let info = {\n          name: user.name.first + \" \" + user.name.last,\n          email: user.email,\n          age: user.dob.age,\n          phone: user.phone,\n          cell: user.cell,\n          city: user.location.city,\n          country: user.location.country,\n\n          img: (\n            <img\n              src={user.picture.thumbnail}\n              alt={user.name.first + \"profile pic unavailable\"}\n            />\n          ),\n        };\n        //pushing individual employee data to the temperary array\n        emprec.push(info);\n      }\n      // setting the state equal to the temperary array\n      this.setState({ empres: emprec });\n    });\n  };\n  // returns the table filled with employee data\n  render() {\n    return <DataTable employees={this.state.empres} />;\n  }\n}\n","import React from \"react\";\nimport \"./style.css\";\n// a simple wrapper function to contain everything within the app\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import \"./style.css\";\n//import Background from \"../assets/images/DigitalImage.jpg\";\nimport React from \"react\";\n// basic function return the hero image with text overlay\nfunction Hero() {\n  return (\n    <div className=\"hero text-center\">\n      {/* <Background /> */}\n      <h1 id=\"title\">Employee Directory</h1>\n      <p className=\"text\">\n        Search the directory or click the column you'd like to sort\n      </p>\n    </div>\n  );\n}\n\nexport default Hero;\n","import React from \"react\";\n// a simple bootstrap sticky footer is returned\nfunction Footer() {\n  return (\n    <nav class=\"navbar fixed-bottom navbar-light bg-light\" id=\"foot\">\n      <div class=\"container-fluid justify-content-center\">\n        <a class=\"navbar-brand\">Jack Murphy 2021 github: jmurphy0</a>\n      </div>\n    </nav>\n  );\n}\n\nexport default Footer;\n","//importing necessary components to be called in the app function.\nimport \"./App.css\";\nimport Emp from \"./components/EmpData\";\nimport Wrapper from \"./components/Wrapper\";\nimport Hero from \"./components/Hero\";\nimport Footer from \"./components/Footer\";\n// this is the function that will return our componenets to be rendered by react\nfunction App() {\n  return (\n    <div>\n      <Wrapper>\n        <Hero />\n        <Emp />\n        <Footer />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}